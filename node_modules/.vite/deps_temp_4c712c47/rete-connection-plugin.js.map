{
  "version": 3,
  "sources": ["../../rete-connection-plugin/src/pseudoconnection.ts", "../../rete-connection-plugin/src/utils.ts", "../../rete-connection-plugin/src/flow/base.ts", "../../rete-connection-plugin/src/flow/utils.ts", "../../rete-connection-plugin/src/flow/builtin/bidirect.ts", "../../rete-connection-plugin/src/flow/builtin/classic/sync-connections.ts", "../../rete-connection-plugin/src/flow/builtin/classic/index.ts", "../../rete-connection-plugin/src/presets/classic.ts", "../../rete-connection-plugin/src/presets/index.ts", "../../rete-connection-plugin/src/index.ts"],
  "sourcesContent": ["import { getUID } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ClassicScheme, Position, SocketData } from './types'\n\n/**\n * Create pseudoconnection. Used to trigger rendering of connection that is being created by user.\n * Has additional `isPseudo` property in payload.\n * @param extra Extra payload to add to connection\n */\nexport function createPseudoconnection<Schemes extends ClassicScheme, K>(extra?: Partial<Schemes['Connection']>) {\n  let element: HTMLElement | null = null\n  let id: string | null = null\n\n  function unmount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\n    if (id) {\n      areaPlugin.removeConnectionView(id)\n    }\n    element = null\n    id = null\n  }\n  function mount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\n    unmount(areaPlugin)\n    id = `pseudo_${getUID()}`\n  }\n\n  return {\n    isMounted() {\n      return Boolean(id)\n    },\n    mount,\n    // eslint-disable-next-line complexity\n    render(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>, { x, y }: Position, data: SocketData) {\n      const isOutput = data.side === 'output'\n      const pointer = { x: x + (isOutput ? -3 : 3), y } // fix hover of underlying elements\n\n      if (!id) throw new Error('pseudo connection id wasn\\'t generated')\n\n      const payload = isOutput ? {\n        id,\n        source: data.nodeId,\n        sourceOutput: data.key,\n        target: '',\n        targetInput: '',\n        ...(extra || {})\n      } : {\n        id,\n        target: data.nodeId,\n        targetInput: data.key,\n        source: '',\n        sourceOutput: '',\n        ...(extra || {})\n      }\n\n      if (!element) {\n        const view = areaPlugin.addConnectionView(payload)\n\n        element = view.element\n      }\n\n      if (!element) return\n\n      areaPlugin.emit({\n        type: 'render', data: {\n          element,\n          type: 'connection',\n          payload,\n          ...(isOutput ? { end: pointer } : { start: pointer })\n        }\n      })\n    },\n    unmount\n  }\n}\n", "import { SocketData } from './types'\n/**\n * @param elements list of Element returned by document.elementsFromPoint\n */\nexport function findSocket(socketsCache: WeakMap<Element, SocketData>, elements: Element[]) {\n  for (const element of elements) {\n    const found = socketsCache.get(element)\n\n    if (found) {\n      return found\n    }\n  }\n}\n", "import { BaseSchemes, NodeEditor, Scope } from 'rete'\n\nimport { Connection, SocketData } from '../types'\n\nexport type Context<Schemes extends BaseSchemes, K extends any[]> = {\n    editor: NodeEditor<Schemes>\n    scope: Scope<Connection, K>\n    socketsCache: Map<Element, SocketData>\n}\nexport type EventType = 'up' | 'down'\nexport type PickParams = { socket: SocketData, event: EventType }\n\nexport abstract class Flow<Schemes extends BaseSchemes, K extends any[]> {\n    public abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\n    public abstract getPickedSocket(): SocketData | undefined\n    public abstract drop(context: Context<Schemes, K>): void\n}\n", "import { getUID } from 'rete'\n\nimport { ClassicScheme, SocketData } from '../types'\nimport { Context, PickParams } from './base'\n\nexport interface StateContext<Schemes extends ClassicScheme, K extends any[]> {\n  currentState: State<Schemes, K>\n  switchTo(state: State<Schemes, K>): void\n}\n\nexport abstract class State<Schemes extends ClassicScheme, K extends any[]> {\n  context!: StateContext<Schemes, K>\n  initial: SocketData | undefined\n\n  setContext(context: StateContext<Schemes, K>) {\n    this.context = context\n  }\n\n  abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\n  abstract drop(context: Context<Schemes, K>): void\n}\n\nexport function getSourceTarget(initial: SocketData, socket: SocketData) {\n  const forward = initial.side === 'output' && socket.side === 'input'\n  const backward = initial.side === 'input' && socket.side === 'output'\n  const [source, target] = forward\n    ? [initial, socket]\n    : (backward ? [socket, initial] : [])\n\n  if (source && target) return [source, target]\n}\n\nexport function canMakeConnection(initial: SocketData, socket: SocketData) {\n  return Boolean(getSourceTarget(initial, socket))\n}\n\nexport function makeConnection<Schemes extends ClassicScheme, K extends any[]>(initial: SocketData, socket: SocketData, context: Context<Schemes, K>) {\n  const [source, target] = getSourceTarget(initial, socket) || [null, null]\n\n  if (source && target) {\n    context.editor.addConnection({\n      id: getUID(),\n      source: source.nodeId,\n      sourceOutput: source.key,\n      target: target.nodeId,\n      targetInput: target.key\n    })\n    return true\n  }\n}\n", "import { ClassicScheme, SocketData } from '../../types'\nimport { Context, Flow, PickParams } from '../base'\nimport { makeConnection as defaultMakeConnection, State, StateContext } from '../utils'\n\n/**\n * Bidirect flow params\n */\nexport type BidirectParams<Schemes extends ClassicScheme> = {\n  /** If true, user can pick a pseudo-connection by clicking on socket, not only by pointerdown */\n  pickByClick: boolean\n  /** Custom function to make connection */\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\n}\n\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(public initial: SocketData, private params: BidirectParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.params.makeConnection(this.initial, socket, context)) {\n      this.drop(context, socket, true)\n    } else if (!this.params.pickByClick) {\n      this.drop(context, socket)\n    }\n  }\n\n  drop(context: Context<ClassicScheme, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\n  }\n}\n\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(private params: BidirectParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (event === 'down') {\n      if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\n        this.context.switchTo(new Picked(socket, this.params))\n      } else {\n        this.drop(context)\n      }\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    delete this.initial\n  }\n}\n\n/**\n * Bidirect flow. User can pick a socket and connect it by releasing mouse button.\n * More simple than classic flow, but less functional (can't remove connection by clicking on input socket).\n */\nexport class BidirectFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\n  currentState!: State<Schemes, K>\n\n  constructor(params?: Partial<BidirectParams<Schemes>>) {\n    const pickByClick = Boolean(params?.pickByClick)\n    const makeConnection = params?.makeConnection || defaultMakeConnection\n\n    this.switchTo(new Idle({ pickByClick, makeConnection }))\n  }\n\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\n    await this.currentState.pick(params, context)\n  }\n\n  public getPickedSocket() {\n    return this.currentState.initial\n  }\n\n  public drop(context: Context<Schemes, K>) {\n    this.currentState.drop(context)\n  }\n\n  public switchTo(state: State<Schemes, K>): void {\n    state.setContext(this)\n    this.currentState = state\n  }\n}\n", "import { NodeEditor } from 'rete'\n\nimport { ClassicScheme, SocketData } from '../../../types'\n\nfunction findPort<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\n  const node = editor.getNode(socket.nodeId)\n\n  if (!node) throw new Error('cannot find node')\n\n  const list = socket.side === 'input' ? node.inputs : node.outputs\n\n  return list[socket.key]\n}\nfunction findConnections<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\n  const { nodeId, side, key } = socket\n\n  return editor.getConnections().filter(connection => {\n    if (side === 'input') {\n      return connection.target === nodeId && connection.targetInput === key\n    }\n    if (side === 'output') {\n      return connection.source === nodeId && connection.sourceOutput === key\n    }\n  })\n}\n\n/**\n * Remove existing connections if Port doesnt allow multiple connections\n */\nexport function syncConnections<Schemes extends ClassicScheme>(sockets: SocketData[], editor: NodeEditor<Schemes>) {\n  const connections: Schemes['Connection'][] = sockets.map(socket => {\n    const port = findPort(socket, editor)\n    const multiple = port?.multipleConnections\n\n    if (multiple) return []\n\n    return findConnections(socket, editor)\n  }).flat()\n\n  return {\n    commit() {\n      const uniqueIds = Array.from(new Set(connections.map(({ id }) => id)))\n\n      uniqueIds.forEach(id => editor.removeConnection(id))\n    }\n  }\n}\n", "\nimport { ClassicScheme, SocketData } from '../../../types'\nimport { Context, Flow, PickParams } from '../../base'\nimport {\n  canMakeConnection as defaultCanMakeConnection, makeConnection as defaultMakeConnection, State, StateContext\n} from '../../utils'\nimport { syncConnections } from './sync-connections'\n\n/**\n * Classic flow params\n */\nexport type ClassicParams<Schemes extends ClassicScheme> = {\n  /** Custom function to check if connection can be made */\n  canMakeConnection: (from: SocketData, to: SocketData) => boolean | undefined\n  /** Custom function to make connection */\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\n}\n\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(public initial: SocketData, private params: ClassicParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.params.canMakeConnection(this.initial, socket)) {\n      syncConnections([this.initial, socket], context.editor).commit()\n      const created = this.params.makeConnection(this.initial, socket, context)\n\n      this.drop(context, created ? socket : null, created)\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle(this.params))\n  }\n}\n\nclass PickedExisting<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  initial!: SocketData\n  outputSocket: SocketData\n\n  constructor(public connection: Schemes['Connection'], private params: ClassicParams<Schemes>, context: Context<Schemes, K>) {\n    super()\n    const outputSocket = Array.from(context.socketsCache.values()).find(data => {\n      return data.nodeId === this.connection.source\n        && data.side === 'output'\n        && data.key === this.connection.sourceOutput\n    })\n\n    if (!outputSocket) throw new Error('cannot find output socket')\n\n    this.outputSocket = outputSocket\n  }\n\n  async init(context: Context<Schemes, K>) {\n    context.scope.emit({ type: 'connectionpick', data: { socket: this.outputSocket } }).then(response => {\n      if (response) {\n        context.editor.removeConnection(this.connection.id)\n        this.initial = this.outputSocket\n      } else {\n        this.drop(context)\n      }\n    })\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.initial && !(socket.side === 'input' && this.connection.target === socket.nodeId && this.connection.targetInput === socket.key)) {\n      if (this.params.canMakeConnection(this.initial, socket)) {\n        syncConnections([this.initial, socket], context.editor).commit()\n        const created = this.params.makeConnection(this.initial, socket, context)\n\n        this.drop(context, created ? socket : null, created)\n      }\n    } else if (event === 'down') {\n      if (this.initial) {\n        syncConnections([this.initial, socket], context.editor).commit()\n        const created = this.params.makeConnection(this.initial, socket, context)\n\n        this.drop(context, created ? socket : null, created)\n      }\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\n  }\n}\n\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(private params: ClassicParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (event !== 'down') return\n    if (socket.side === 'input') {\n      const connection = context\n        .editor.getConnections()\n        .find(item => item.target === socket.nodeId && item.targetInput === socket.key)\n\n      if (connection) {\n        const state = new PickedExisting(connection, this.params, context)\n\n        await state.init(context)\n        this.context.switchTo(state)\n        return\n      }\n    }\n\n    if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\n      this.context.switchTo(new Picked(socket, this.params))\n    } else {\n      this.drop(context)\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    delete this.initial\n  }\n}\n\n/**\n * Classic flow. User can pick/click a socket and connect it by releasing/clicking on another socket.\n * If connection already exists and user clicks on input socket, connection will be removed.\n */\nexport class ClassicFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\n  currentState!: State<Schemes, K>\n\n  constructor(params?: Partial<ClassicParams<Schemes>>) {\n    const canMakeConnection = params?.canMakeConnection || defaultCanMakeConnection\n    const makeConnection = params?.makeConnection || defaultMakeConnection\n\n    this.switchTo(new Idle<Schemes, K>({ canMakeConnection, makeConnection }))\n  }\n\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\n    await this.currentState.pick(params, context)\n  }\n\n  public getPickedSocket() {\n    return this.currentState.initial\n  }\n\n  public switchTo(state: State<Schemes, K>): void {\n    state.setContext(this)\n    this.currentState = state\n  }\n\n  public drop(context: Context<Schemes, K>) {\n    this.currentState.drop(context)\n  }\n}\n", "import { ClassicFlow } from '../flow'\n\n/**\n * Classic preset. Uses `ClassicFlow` for managing connections by user\n */\nexport function setup() {\n  return () => new ClassicFlow()\n}\n", "/**\n * Built-in presets\n * @module\n */\nexport * as classic from './classic'\n", "import { NodeEditor, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin, RenderSignal } from 'rete-area-plugin'\n\nimport { Flow } from './flow'\nimport { EventType } from './flow/base'\nimport { createPseudoconnection } from './pseudoconnection'\nimport { ClassicScheme, Connection, Position, Preset, Side, SocketData } from './types'\nimport { findSocket } from './utils'\n\nexport * from './flow'\nexport * as Presets from './presets'\nexport { createPseudoconnection } from './pseudoconnection'\nexport type { Connection, ConnectionExtra, Preset, Side, SocketData } from './types'\n\ntype Requires =\n  | { type: 'pointermove', data: { position: Position, event: PointerEvent } }\n  | { type: 'pointerup', data: { position: Position, event: PointerEvent } }\n  | RenderSignal<'socket', {\n    nodeId: string,\n    side: Side,\n    key: string\n  }>\n  | { type: 'unmount', data: { element: HTMLElement } }\n\n/**\n * Connection plugin. Responsible for user interaction with connections (creation, deletion)\n * @priority 9\n * @emits connectionpick\n * @emits connectiondrop\n * @listens pointermove\n * @listens pointerup\n * @listens render\n * @listens unmount\n */\nexport class ConnectionPlugin<Schemes extends ClassicScheme, K = Requires> extends Scope<Connection, [Requires | K]> {\n  presets: Preset<Schemes>[] = []\n  private areaPlugin!: BaseAreaPlugin<Schemes, BaseArea<Schemes>>\n  private editor!: NodeEditor<Schemes>\n  private currentFlow: Flow<Schemes, any[]> | null = null\n  private preudoconnection = createPseudoconnection({ isPseudo: true })\n  private socketsCache = new Map<Element, SocketData>()\n\n  constructor() {\n    super('connection')\n  }\n\n  /**\n   * Add preset to the plugin\n   * @param preset Preset to add\n   */\n  public addPreset(preset: Preset<Schemes>) {\n    this.presets.push(preset)\n  }\n\n  private findPreset(data: SocketData) {\n    for (const preset of this.presets) {\n      const flow = preset(data)\n\n      if (flow) return flow\n    }\n    return null\n  }\n\n  update() {\n    if (!this.currentFlow) return\n    const socket = this.currentFlow.getPickedSocket()\n\n    if (socket) {\n      this.preudoconnection.render(this.areaPlugin, this.areaPlugin.area.pointer, socket)\n    }\n  }\n\n  /**\n   * Drop pseudo-connection if exists\n   * @emits connectiondrop\n   */\n  drop() {\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\n\n    if (this.currentFlow) {\n      this.currentFlow.drop(flowContext)\n      this.preudoconnection.unmount(this.areaPlugin)\n      this.currentFlow = null\n    }\n  }\n\n  // eslint-disable-next-line max-statements\n  async pick(event: PointerEvent, type: EventType) {\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\n    const pointedElements = document.elementsFromPoint(event.clientX, event.clientY)\n    const pickedSocket = findSocket(this.socketsCache, pointedElements)\n\n    event.preventDefault()\n    event.stopPropagation()\n\n    if (pickedSocket) {\n      this.currentFlow = this.currentFlow || this.findPreset(pickedSocket)\n\n      if (this.currentFlow) {\n        await this.currentFlow.pick({ socket: pickedSocket, event: type }, flowContext)\n        this.preudoconnection.mount(this.areaPlugin)\n      }\n    } else if (this.currentFlow) {\n      this.currentFlow.drop(flowContext)\n    }\n    if (this.currentFlow && !this.currentFlow.getPickedSocket()) {\n      this.preudoconnection.unmount(this.areaPlugin)\n      this.currentFlow = null\n    }\n    this.update()\n  }\n\n  setParent(scope: Scope<Requires | K>): void {\n    super.setParent(scope)\n    this.areaPlugin = this.parentScope<BaseAreaPlugin<Schemes, BaseArea<Schemes>>>(BaseAreaPlugin)\n    this.editor = this.areaPlugin.parentScope<NodeEditor<Schemes>>(NodeEditor)\n\n    const pointerdownSocket = (e: PointerEvent) => {\n      this.pick(e, 'down')\n    }\n\n    // eslint-disable-next-line max-statements\n    this.addPipe(context => {\n      if (!context || typeof context !== 'object' || !('type' in context)) return context\n\n      if (context.type === 'pointermove') {\n        this.update()\n      } else if (context.type === 'pointerup') {\n        this.pick(context.data.event, 'up')\n      } else if (context.type === 'render') {\n        if (context.data.type === 'socket') {\n          const { element } = context.data\n\n          element.addEventListener('pointerdown', pointerdownSocket)\n          this.socketsCache.set(element, context.data)\n        }\n      } else if (context.type === 'unmount') {\n        const { element } = context.data\n\n        element.removeEventListener('pointerdown', pointerdownSocket)\n        this.socketsCache.delete(element)\n      }\n      return context\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": ["createPseudoconnection", "extra", "element", "id", "unmount", "areaPlugin", "removeConnectionView", "mount", "concat", "getUID", "isMounted", "Boolean", "render", "_ref", "data", "x", "y", "isOutput", "side", "pointer", "Error", "payload", "_objectSpread", "source", "nodeId", "sourceOutput", "key", "target", "targetInput", "view", "addConnectionView", "emit", "type", "end", "start", "findSocket", "socketsCache", "elements", "_iterator", "_createForOfIteratorHelper", "_step", "s", "n", "done", "value", "found", "get", "err", "e", "f", "Flow", "_createClass", "_classCallCheck", "State", "setContext", "context", "getSourceTarget", "initial", "socket", "forward", "backward", "_ref2", "_slicedToArray", "canMakeConnection", "makeConnection", "_ref3", "_ref4", "editor", "addConnection", "Picked", "_State", "_inherits", "_super", "_createSuper", "params", "_this", "call", "_pick", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "wrap", "_callee$", "_context", "prev", "next", "drop", "pickByClick", "stop", "pick", "_x", "_x2", "apply", "arguments", "length", "undefined", "created", "scope", "switchTo", "Idle", "_State2", "_super2", "_this2", "_pick2", "_callee2", "event", "_callee2$", "_context2", "sent", "_x3", "_x4", "BidirectFlow", "defaultMakeConnection", "_pick3", "_callee3", "_callee3$", "_context3", "currentState", "_x5", "_x6", "getPickedSocket", "state", "findPort", "node", "getNode", "list", "inputs", "outputs", "findConnections", "getConnections", "filter", "connection", "syncConnections", "sockets", "connections", "map", "port", "multiple", "multipleConnections", "flat", "commit", "uniqueIds", "Array", "from", "Set", "forEach", "removeConnection", "PickedExisting", "outputSocket", "values", "find", "_init", "_this3", "then", "response", "init", "_created", "_State3", "_super3", "_this4", "_callee4", "_connection", "_callee4$", "_context4", "abrupt", "item", "_x7", "ClassicFlow", "defaultCanMakeConnection", "_pick4", "_callee5", "_callee5$", "_context5", "_x8", "_x9", "setup", "ConnectionPlugin", "_Scope", "_defineProperty", "_assertThisInitialized", "isPseudo", "Map", "addPreset", "preset", "presets", "push", "findPreset", "flow", "update", "currentFlow", "preudoconnection", "area", "flowContext", "pointedElements", "pickedSocket", "document", "elementsFromPoint", "clientX", "clientY", "preventDefault", "stopPropagation", "setParent", "_get", "_getPrototypeOf", "prototype", "parentScope", "BaseAreaPlugin", "NodeEditor", "pointerdownSocket", "addPipe", "_typeof", "addEventListener", "set", "removeEventListener", "Scope"]
}

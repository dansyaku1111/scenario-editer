{
  "version": 3,
  "sources": ["../../rete-connection-plugin/src/pseudoconnection.ts", "../../rete-connection-plugin/src/utils.ts", "../../rete-connection-plugin/src/flow/base.ts", "../../rete-connection-plugin/src/flow/utils.ts", "../../rete-connection-plugin/src/flow/builtin/bidirect.ts", "../../rete-connection-plugin/src/flow/builtin/classic/sync-connections.ts", "../../rete-connection-plugin/src/flow/builtin/classic/index.ts", "../../rete-connection-plugin/src/presets/classic.ts", "../../rete-connection-plugin/src/presets/index.ts", "../../rete-connection-plugin/src/index.ts"],
  "sourcesContent": ["import { getUID } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ClassicScheme, Position, SocketData } from './types'\n\n/**\n * Create pseudoconnection. Used to trigger rendering of connection that is being created by user.\n * Has additional `isPseudo` property in payload.\n * @param extra Extra payload to add to connection\n */\nexport function createPseudoconnection<Schemes extends ClassicScheme, K>(extra?: Partial<Schemes['Connection']>) {\n  let element: HTMLElement | null = null\n  let id: string | null = null\n\n  function unmount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\n    if (id) {\n      areaPlugin.removeConnectionView(id)\n    }\n    element = null\n    id = null\n  }\n  function mount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\n    unmount(areaPlugin)\n    id = `pseudo_${getUID()}`\n  }\n\n  return {\n    isMounted() {\n      return Boolean(id)\n    },\n    mount,\n    render(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>, { x, y }: Position, data: SocketData) {\n      const isOutput = data.side === 'output'\n      const pointer = {\n        x: x + (isOutput\n          ? -3\n          : 3),\n        y\n      } // fix hover of underlying elements\n\n      if (!id) throw new Error('pseudo connection id wasn\\'t generated')\n\n      const payload = isOutput\n        ? {\n          id,\n          source: data.nodeId,\n          sourceOutput: data.key,\n          target: '',\n          targetInput: '',\n          ...extra ?? {}\n        }\n        : {\n          id,\n          target: data.nodeId,\n          targetInput: data.key,\n          source: '',\n          sourceOutput: '',\n          ...extra ?? {}\n        }\n\n      if (!element) {\n        const view = areaPlugin.addConnectionView(payload)\n\n        element = view.element\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!element) return\n\n      void areaPlugin.emit({\n        type: 'render',\n        data: {\n          element,\n          type: 'connection',\n          payload,\n          ...isOutput\n            ? { end: pointer }\n            : { start: pointer }\n        }\n      })\n    },\n    unmount\n  }\n}\n", "import { SocketData } from './types'\n/**\n * @param elements list of Element returned by document.elementsFromPoint\n */\nexport function findSocket(socketsCache: WeakMap<Element, SocketData>, elements: Element[]) {\n  for (const element of elements) {\n    const found = socketsCache.get(element)\n\n    if (found) {\n      return found\n    }\n  }\n}\n\n/**\n * Alternative to document.elementsFromPoint that traverses shadow roots\n * @param x x coordinate\n * @param y y coordinate\n * @param root root element to search in\n */\nexport function elementsFromPoint(x: number, y: number, root: ShadowRoot | Document = document) {\n  const elements = root.elementsFromPoint(x, y)\n  const shadowRoot = elements[0]?.shadowRoot\n\n  if (shadowRoot && shadowRoot !== root) {\n    elements.unshift(...elementsFromPoint(x, y, shadowRoot))\n  }\n\n  return elements\n}\n", "import { BaseSchemes, NodeEditor, Scope } from 'rete'\n\nimport { Connection, SocketData } from '../types'\n\nexport type Context<Schemes extends BaseSchemes, K extends any[]> = {\n  editor: NodeEditor<Schemes>\n  scope: Scope<Connection, K>\n  socketsCache: Map<Element, SocketData>\n}\nexport type EventType = 'up' | 'down'\nexport type PickParams = { socket: SocketData, event: EventType }\n\nexport abstract class Flow<Schemes extends BaseSchemes, K extends any[]> {\n  public abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\n  public abstract getPickedSocket(): SocketData | undefined\n  public abstract drop(context: Context<Schemes, K>): void\n}\n", "import { getUID } from 'rete'\n\nimport { ClassicScheme, SocketData } from '../types'\nimport { Context, PickParams } from './base'\n\nexport interface StateContext<Schemes extends ClassicScheme, K extends any[]> {\n  currentState: State<Schemes, K>\n  switchTo(state: State<Schemes, K>): void\n}\n\nexport abstract class State<Schemes extends ClassicScheme, K extends any[]> {\n  context!: StateContext<Schemes, K>\n  initial: SocketData | undefined\n\n  setContext(context: StateContext<Schemes, K>) {\n    this.context = context\n  }\n\n  abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\n  abstract drop(context: Context<Schemes, K>): void\n}\n\nexport function getSourceTarget(initial: SocketData, socket: SocketData) {\n  const forward = initial.side === 'output' && socket.side === 'input'\n  const backward = initial.side === 'input' && socket.side === 'output'\n  const [source, target] = forward\n    ? [initial, socket]\n    : backward\n      ? [socket, initial]\n      : []\n\n  if (source && target) return [source, target]\n}\n\nexport function canMakeConnection(initial: SocketData, socket: SocketData) {\n  return Boolean(getSourceTarget(initial, socket))\n}\n\nexport function makeConnection<Schemes extends ClassicScheme, K extends any[]>(initial: SocketData, socket: SocketData, context: Context<Schemes, K>) {\n  const [source, target] = getSourceTarget(initial, socket) || [null, null]\n\n  if (source && target) {\n    void context.editor.addConnection({\n      id: getUID(),\n      source: source.nodeId,\n      sourceOutput: source.key,\n      target: target.nodeId,\n      targetInput: target.key\n    })\n    return true\n  }\n}\n", "/* eslint-disable @typescript-eslint/require-await */\nimport { ClassicScheme, SocketData } from '../../types'\nimport { Context, Flow, PickParams } from '../base'\nimport { makeConnection as defaultMakeConnection, State, StateContext } from '../utils'\n\n/**\n * Bidirect flow params\n */\nexport type BidirectParams<Schemes extends ClassicScheme> = {\n  /** If true, user can pick a pseudo-connection by clicking on socket, not only by pointerdown */\n  pickByClick: boolean\n  /** Custom function to make connection */\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\n}\n\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(public initial: SocketData, private params: BidirectParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.params.makeConnection(this.initial, socket, context)) {\n      this.drop(context, socket, true)\n    } else if (!this.params.pickByClick) {\n      this.drop(context, socket)\n    }\n  }\n\n  drop(context: Context<ClassicScheme, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\n  }\n}\n\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(private params: BidirectParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (event === 'down') {\n      if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\n        this.context.switchTo(new Picked(socket, this.params))\n      } else {\n        this.drop(context)\n      }\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    delete this.initial\n  }\n}\n\n/**\n * Bidirect flow. User can pick a socket and connect it by releasing mouse button.\n * More simple than classic flow, but less functional (can't remove connection by clicking on input socket).\n */\nexport class BidirectFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\n  currentState!: State<Schemes, K>\n\n  constructor(params?: Partial<BidirectParams<Schemes>>) {\n    const pickByClick = Boolean(params?.pickByClick)\n    const makeConnection = params?.makeConnection || defaultMakeConnection\n\n    this.switchTo(new Idle({ pickByClick, makeConnection }))\n  }\n\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\n    await this.currentState.pick(params, context)\n  }\n\n  public getPickedSocket() {\n    return this.currentState.initial\n  }\n\n  public drop(context: Context<Schemes, K>) {\n    this.currentState.drop(context)\n  }\n\n  public switchTo(state: State<Schemes, K>): void {\n    state.setContext(this)\n    this.currentState = state\n  }\n}\n", "import { NodeEditor } from 'rete'\n\nimport { ClassicScheme, SocketData } from '../../../types'\n\nfunction findPort<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\n  const node = editor.getNode(socket.nodeId)\n\n  if (!node) throw new Error('cannot find node')\n\n  const list = socket.side === 'input'\n    ? node.inputs\n    : node.outputs\n\n  return list[socket.key]\n}\nfunction findConnections<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\n  const { nodeId, side, key } = socket\n\n  return editor.getConnections().filter(connection => {\n    if (side === 'input') {\n      return connection.target === nodeId && connection.targetInput === key\n    }\n    if (side === 'output') {\n      return connection.source === nodeId && connection.sourceOutput === key\n    }\n  })\n}\n\n/**\n * Remove existing connections if Port doesnt allow multiple connections\n */\nexport function syncConnections<Schemes extends ClassicScheme>(sockets: SocketData[], editor: NodeEditor<Schemes>) {\n  const connections: Schemes['Connection'][] = sockets.map(socket => {\n    const port = findPort(socket, editor)\n    const multiple = port?.multipleConnections\n\n    if (multiple) return []\n\n    return findConnections(socket, editor)\n  }).flat()\n\n  return {\n    commit() {\n      const uniqueIds = Array.from(new Set(connections.map(({ id }) => id)))\n\n      uniqueIds.forEach(id => void editor.removeConnection(id))\n    }\n  }\n}\n", "/* eslint-disable @typescript-eslint/require-await */\n\nimport { ClassicScheme, SocketData } from '../../../types'\nimport { Context, Flow, PickParams } from '../../base'\nimport {\n  canMakeConnection as defaultCanMakeConnection, makeConnection as defaultMakeConnection, State, StateContext\n} from '../../utils'\nimport { syncConnections } from './sync-connections'\n\n/**\n * Classic flow params\n */\nexport type ClassicParams<Schemes extends ClassicScheme> = {\n  /** Custom function to check if connection can be made */\n  canMakeConnection: (from: SocketData, to: SocketData) => boolean | undefined\n  /** Custom function to make connection */\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\n}\n\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(public initial: SocketData, private params: ClassicParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.params.canMakeConnection(this.initial, socket)) {\n      syncConnections([this.initial, socket], context.editor).commit()\n      const created = this.params.makeConnection(this.initial, socket, context)\n\n      this.drop(context, created\n        ? socket\n        : null, created)\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle(this.params))\n  }\n}\n\nclass PickedExisting<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  initial!: SocketData\n  outputSocket: SocketData\n\n  constructor(public connection: Schemes['Connection'], private params: ClassicParams<Schemes>, context: Context<Schemes, K>) {\n    super()\n    const outputSocket = Array.from(context.socketsCache.values()).find(data => {\n      return data.nodeId === this.connection.source\n        && data.side === 'output'\n        && data.key === this.connection.sourceOutput\n    })\n\n    if (!outputSocket) throw new Error('cannot find output socket')\n\n    this.outputSocket = outputSocket\n  }\n\n  async init(context: Context<Schemes, K>) {\n    void context.scope.emit({ type: 'connectionpick', data: { socket: this.outputSocket } }).then(response => {\n      if (response) {\n        void context.editor.removeConnection(this.connection.id)\n        this.initial = this.outputSocket\n      } else {\n        this.drop(context)\n      }\n    })\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (this.initial && !(socket.side === 'input' && this.connection.target === socket.nodeId && this.connection.targetInput === socket.key)) {\n      if (this.params.canMakeConnection(this.initial, socket)) {\n        syncConnections([this.initial, socket], context.editor).commit()\n        const created = this.params.makeConnection(this.initial, socket, context)\n        const droppedSocket = created\n          ? socket\n          : null\n\n        this.drop(context, droppedSocket, created)\n      }\n    } else if (event === 'down') {\n      if (this.initial) {\n        syncConnections([this.initial, socket], context.editor).commit()\n        const created = this.params.makeConnection(this.initial, socket, context)\n        const droppedSocket = created\n          ? null\n          : socket\n\n        this.drop(context, droppedSocket, created)\n      }\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\n  }\n}\n\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\n  constructor(private params: ClassicParams<Schemes>) {\n    super()\n  }\n\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\n    if (event !== 'down') return\n    if (socket.side === 'input') {\n      const connection = context\n        .editor.getConnections()\n        .find(item => item.target === socket.nodeId && item.targetInput === socket.key)\n\n      if (connection) {\n        const state = new PickedExisting(connection, this.params, context)\n\n        await state.init(context)\n        this.context.switchTo(state)\n        return\n      }\n    }\n\n    if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\n      this.context.switchTo(new Picked(socket, this.params))\n    } else {\n      this.drop(context)\n    }\n  }\n\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\n    if (this.initial) {\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\n    }\n    delete this.initial\n  }\n}\n\n/**\n * Classic flow. User can pick/click a socket and connect it by releasing/clicking on another socket.\n * If connection already exists and user clicks on input socket, connection will be removed.\n */\nexport class ClassicFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\n  currentState!: State<Schemes, K>\n\n  constructor(params?: Partial<ClassicParams<Schemes>>) {\n    const canMakeConnection = params?.canMakeConnection || defaultCanMakeConnection\n    const makeConnection = params?.makeConnection || defaultMakeConnection\n\n    this.switchTo(new Idle<Schemes, K>({ canMakeConnection, makeConnection }))\n  }\n\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\n    await this.currentState.pick(params, context)\n  }\n\n  public getPickedSocket() {\n    return this.currentState.initial\n  }\n\n  public switchTo(state: State<Schemes, K>): void {\n    state.setContext(this)\n    this.currentState = state\n  }\n\n  public drop(context: Context<Schemes, K>) {\n    this.currentState.drop(context)\n  }\n}\n", "import { ClassicFlow } from '../flow'\n\n/**\n * Classic preset. Uses `ClassicFlow` for managing connections by user\n */\nexport function setup() {\n  return () => new ClassicFlow()\n}\n", "/**\n * Built-in presets\n * @module\n */\nexport * as classic from './classic'\n", "import { NodeEditor, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin, RenderSignal } from 'rete-area-plugin'\n\nimport { Flow } from './flow'\nimport { EventType } from './flow/base'\nimport { createPseudoconnection } from './pseudoconnection'\nimport { ClassicScheme, Connection, Position, Preset, Side, SocketData } from './types'\nimport { elementsFromPoint, findSocket } from './utils'\n\nexport * from './flow'\nexport * as Presets from './presets'\nexport { createPseudoconnection } from './pseudoconnection'\nexport type { Connection, ConnectionExtra, Preset, Side, SocketData } from './types'\n\ntype Requires =\n  | { type: 'pointermove', data: { position: Position, event: PointerEvent } }\n  | { type: 'pointerup', data: { position: Position, event: PointerEvent } }\n  | RenderSignal<'socket', {\n    nodeId: string\n    side: Side\n    key: string\n  }>\n  | { type: 'unmount', data: { element: HTMLElement } }\n\n/**\n * Connection plugin. Responsible for user interaction with connections (creation, deletion)\n * @priority 9\n * @emits connectionpick\n * @emits connectiondrop\n * @listens pointermove\n * @listens pointerup\n * @listens render\n * @listens unmount\n */\nexport class ConnectionPlugin<Schemes extends ClassicScheme, K = Requires> extends Scope<Connection, [Requires | K]> {\n  presets: Preset<Schemes>[] = []\n  private areaPlugin!: BaseAreaPlugin<Schemes, BaseArea<Schemes>>\n  private editor!: NodeEditor<Schemes>\n  private currentFlow: Flow<Schemes, any[]> | null = null\n  private preudoconnection = createPseudoconnection({ isPseudo: true })\n  private socketsCache = new Map<Element, SocketData>()\n\n  constructor() {\n    super('connection')\n  }\n\n  /**\n   * Add preset to the plugin\n   * @param preset Preset to add\n   */\n  public addPreset(preset: Preset<Schemes>) {\n    this.presets.push(preset)\n  }\n\n  private findPreset(data: SocketData) {\n    for (const preset of this.presets) {\n      const flow = preset(data)\n\n      if (flow) return flow\n    }\n    return null\n  }\n\n  update() {\n    if (!this.currentFlow) return\n    const socket = this.currentFlow.getPickedSocket()\n\n    if (socket) {\n      this.preudoconnection.render(this.areaPlugin, this.areaPlugin.area.pointer, socket)\n    }\n  }\n\n  /**\n   * Drop pseudo-connection if exists\n   * @emits connectiondrop\n   */\n  drop() {\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\n\n    if (this.currentFlow) {\n      this.currentFlow.drop(flowContext)\n      this.preudoconnection.unmount(this.areaPlugin)\n      this.currentFlow = null\n    }\n  }\n\n  // eslint-disable-next-line max-statements\n  async pick(event: PointerEvent, type: EventType) {\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\n    const pointedElements = elementsFromPoint(event.clientX, event.clientY)\n    const pickedSocket = findSocket(this.socketsCache, pointedElements)\n\n    if (pickedSocket) {\n      event.preventDefault()\n      event.stopPropagation()\n      this.currentFlow = this.currentFlow || this.findPreset(pickedSocket)\n\n      if (this.currentFlow) {\n        await this.currentFlow.pick({ socket: pickedSocket, event: type }, flowContext)\n        this.preudoconnection.mount(this.areaPlugin)\n      }\n    } else if (this.currentFlow) {\n      this.currentFlow.drop(flowContext)\n    }\n    if (this.currentFlow && !this.currentFlow.getPickedSocket()) {\n      this.preudoconnection.unmount(this.areaPlugin)\n      this.currentFlow = null\n    }\n    this.update()\n  }\n\n  setParent(scope: Scope<Requires | K>): void {\n    super.setParent(scope)\n    this.areaPlugin = this.parentScope<BaseAreaPlugin<Schemes, BaseArea<Schemes>>>(BaseAreaPlugin)\n    this.editor = this.areaPlugin.parentScope<NodeEditor<Schemes>>(NodeEditor)\n\n    const pointerdownSocket = (e: PointerEvent) => {\n      void this.pick(e, 'down')\n    }\n\n    this.addPipe(context => {\n      if (!context || typeof context !== 'object' || !('type' in context)) return context\n\n      if (context.type === 'pointermove') {\n        this.update()\n      } else if (context.type === 'pointerup') {\n        void this.pick(context.data.event, 'up')\n      } else if (context.type === 'render') {\n        if (context.data.type === 'socket') {\n          const { element } = context.data\n\n          element.addEventListener('pointerdown', pointerdownSocket)\n          this.socketsCache.set(element, context.data)\n        }\n      } else if (context.type === 'unmount') {\n        const { element } = context.data\n\n        element.removeEventListener('pointerdown', pointerdownSocket)\n        this.socketsCache.delete(element)\n      }\n      return context\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": ["createPseudoconnection", "extra", "element", "id", "unmount", "areaPlugin", "removeConnectionView", "mount", "concat", "getUID", "isMounted", "Boolean", "render", "_ref", "data", "x", "y", "isOutput", "side", "pointer", "Error", "payload", "_objectSpread", "source", "nodeId", "sourceOutput", "key", "target", "targetInput", "view", "addConnectionView", "emit", "type", "end", "start", "findSocket", "socketsCache", "elements", "_iterator", "_createForOfIteratorHelper", "_step", "s", "n", "done", "value", "found", "get", "err", "e", "f", "elementsFromPoint", "_elements$", "root", "arguments", "length", "undefined", "document", "shadowRoot", "unshift", "apply", "_toConsumableArray", "Flow", "_createClass", "_classCallCheck", "State", "setContext", "context", "getSourceTarget", "initial", "socket", "forward", "backward", "_ref2", "_slicedToArray", "canMakeConnection", "makeConnection", "_ref3", "_ref4", "editor", "addConnection", "Picked", "_State", "params", "_this", "_callSuper", "_inherits", "_pick", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "wrap", "_callee$", "_context", "prev", "next", "drop", "pickByClick", "stop", "pick", "_x", "_x2", "created", "scope", "switchTo", "Idle", "_State2", "_this2", "_pick2", "_callee2", "event", "_callee2$", "_context2", "sent", "_x3", "_x4", "BidirectFlow", "defaultMakeConnection", "_pick3", "_callee3", "_callee3$", "_context3", "currentState", "_x5", "_x6", "getPickedSocket", "state", "findPort", "node", "getNode", "list", "inputs", "outputs", "findConnections", "getConnections", "filter", "connection", "syncConnections", "sockets", "connections", "map", "port", "multiple", "multipleConnections", "flat", "commit", "uniqueIds", "Array", "from", "Set", "forEach", "removeConnection", "PickedExisting", "outputSocket", "values", "find", "_init", "_this3", "then", "response", "init", "droppedSocket", "_created", "_droppedSocket", "_State3", "_this4", "_callee4", "_connection", "_callee4$", "_context4", "abrupt", "item", "_x7", "ClassicFlow", "defaultCanMakeConnection", "_pick4", "_callee5", "_callee5$", "_context5", "_x8", "_x9", "setup", "ConnectionPlugin", "_Scope", "_defineProperty", "isPseudo", "Map", "addPreset", "preset", "presets", "push", "findPreset", "flow", "update", "currentFlow", "preudoconnection", "area", "flowContext", "pointedElements", "pickedSocket", "clientX", "clientY", "preventDefault", "stopPropagation", "setParent", "_superPropGet", "parentScope", "BaseAreaPlugin", "NodeEditor", "pointerdownSocket", "addPipe", "_typeof", "addEventListener", "set", "removeEventListener", "Scope"]
}

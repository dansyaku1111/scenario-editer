import {
  _get,
  _slicedToArray
} from "./chunk-USND36ZK.js";
import {
  BaseAreaPlugin,
  _toConsumableArray
} from "./chunk-V6HEOTNJ.js";
import {
  NodeEditor,
  Scope,
  _asyncToGenerator,
  _classCallCheck,
  _createClass,
  _defineProperty,
  _getPrototypeOf,
  _inherits,
  _possibleConstructorReturn,
  _typeof,
  require_regenerator
} from "./chunk-IISXBNTT.js";
import {
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/rete-context-menu-plugin/rete-context-menu-plugin.esm.js
var import_regenerator = __toESM(require_regenerator());
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function createItem(_ref, key, context) {
  var _ref2 = _slicedToArray(_ref, 2), label = _ref2[0], factory = _ref2[1];
  var item = {
    label,
    key: String(key),
    handler: function handler() {
    }
  };
  if (typeof factory === "function") {
    return _objectSpread(_objectSpread({}, item), {}, {
      handler: function handler() {
        return _asyncToGenerator(import_regenerator.default.mark(function _callee() {
          var node;
          return import_regenerator.default.wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return factory();
                case 2:
                  node = _context.sent;
                  _context.next = 5;
                  return context.editor.addNode(node);
                case 5:
                  void context.area.translate(node.id, context.area.area.pointer);
                case 6:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }))();
      }
    });
  }
  return _objectSpread(_objectSpread({}, item), {}, {
    handler: function handler() {
    },
    subitems: factory.map(function(data, i) {
      return createItem(data, i, context);
    })
  });
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
      t && (r = t);
      var _n = 0, F = function F2() {
      };
      return { s: F, n: function n() {
        return _n >= r.length ? { done: true } : { done: false, value: r[_n++] };
      }, e: function e2(r2) {
        throw r2;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o, a = true, u = false;
  return { s: function s() {
    t = t.call(r);
  }, n: function n() {
    var r2 = t.next();
    return a = r2.done, r2;
  }, e: function e2(r2) {
    u = true, o = r2;
  }, f: function f() {
    try {
      a || null == t["return"] || t["return"]();
    } finally {
      if (u)
        throw o;
    }
  } };
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
function setup(nodes) {
  return function(context, plugin) {
    var _context$clone;
    var area = plugin.parentScope(BaseAreaPlugin);
    var editor = area.parentScope(NodeEditor);
    if (context === "root") {
      return {
        searchBar: true,
        list: nodes.map(function(item, i) {
          return createItem(item, i, {
            editor,
            area
          });
        })
      };
    }
    var deleteItem = {
      label: "Delete",
      key: "delete",
      handler: function handler() {
        return _asyncToGenerator(import_regenerator.default.mark(function _callee() {
          var connectionId, nodeId, connections, _iterator, _step, connection;
          return import_regenerator.default.wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  if (!("source" in context && "target" in context)) {
                    _context.next = 6;
                    break;
                  }
                  connectionId = context.id;
                  _context.next = 4;
                  return editor.removeConnection(connectionId);
                case 4:
                  _context.next = 27;
                  break;
                case 6:
                  nodeId = context.id;
                  connections = editor.getConnections().filter(function(c) {
                    return c.source === nodeId || c.target === nodeId;
                  });
                  _iterator = _createForOfIteratorHelper(connections);
                  _context.prev = 9;
                  _iterator.s();
                case 11:
                  if ((_step = _iterator.n()).done) {
                    _context.next = 17;
                    break;
                  }
                  connection = _step.value;
                  _context.next = 15;
                  return editor.removeConnection(connection.id);
                case 15:
                  _context.next = 11;
                  break;
                case 17:
                  _context.next = 22;
                  break;
                case 19:
                  _context.prev = 19;
                  _context.t0 = _context["catch"](9);
                  _iterator.e(_context.t0);
                case 22:
                  _context.prev = 22;
                  _iterator.f();
                  return _context.finish(22);
                case 25:
                  _context.next = 27;
                  return editor.removeNode(nodeId);
                case 27:
                case "end":
                  return _context.stop();
              }
          }, _callee, null, [[9, 19, 22, 25]]);
        }))();
      }
    };
    var clone = (_context$clone = context.clone) === null || _context$clone === void 0 ? void 0 : _context$clone.bind(context);
    var cloneItem = clone && {
      label: "Clone",
      key: "clone",
      handler: function handler() {
        return _asyncToGenerator(import_regenerator.default.mark(function _callee2() {
          var node;
          return import_regenerator.default.wrap(function _callee2$(_context2) {
            while (1)
              switch (_context2.prev = _context2.next) {
                case 0:
                  node = clone();
                  _context2.next = 3;
                  return editor.addNode(node);
                case 3:
                  void area.translate(node.id, area.area.pointer);
                case 4:
                case "end":
                  return _context2.stop();
              }
          }, _callee2);
        }))();
      }
    };
    return {
      searchBar: false,
      list: [deleteItem].concat(_toConsumableArray(cloneItem ? [cloneItem] : []))
    };
  };
}
var index$1 = Object.freeze({
  __proto__: null,
  setup
});
var index = Object.freeze({
  __proto__: null,
  classic: index$1
});
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t;
  })();
}
function _superPropGet(t, e, o, r) {
  var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), e, o);
  return 2 & r && "function" == typeof p ? function(t2) {
    return p.apply(o, t2);
  } : p;
}
var ContextMenuPlugin = function(_Scope) {
  function ContextMenuPlugin2(props) {
    var _this;
    _classCallCheck(this, ContextMenuPlugin2);
    _this = _callSuper(this, ContextMenuPlugin2, ["context-menu"]);
    _this.props = props;
    return _this;
  }
  _inherits(ContextMenuPlugin2, _Scope);
  return _createClass(ContextMenuPlugin2, [{
    key: "setParent",
    value: function setParent(scope) {
      var _this2 = this;
      _superPropGet(ContextMenuPlugin2, "setParent", this, 3)([scope]);
      var area = this.parentScope(BaseAreaPlugin);
      var container = area.container;
      if (!container || !(container instanceof HTMLElement))
        throw new Error("container expected");
      var element = document.createElement("div");
      element.style.display = "none";
      element.style.position = "fixed";
      this.addPipe(function(context) {
        var parent = _this2.parentScope();
        if (!context || _typeof(context) !== "object" || !("type" in context))
          return context;
        if (context.type === "unmount") {
          if (context.data.element === element) {
            element.style.display = "none";
          }
        } else if (context.type === "contextmenu") {
          context.data.event.preventDefault();
          context.data.event.stopPropagation();
          var _this2$props$items = _this2.props.items(context.data.context, _this2), searchBar = _this2$props$items.searchBar, list = _this2$props$items.list;
          container.appendChild(element);
          element.style.left = "".concat(context.data.event.clientX, "px");
          element.style.top = "".concat(context.data.event.clientY, "px");
          element.style.display = "";
          void parent.emit({
            type: "render",
            data: {
              type: "contextmenu",
              element,
              searchBar,
              onHide: function onHide() {
                void parent.emit({
                  type: "unmount",
                  data: {
                    element
                  }
                });
              },
              items: list
            }
          });
        } else if (context.type === "pointerdown") {
          if (!context.data.event.composedPath().includes(element)) {
            void parent.emit({
              type: "unmount",
              data: {
                element
              }
            });
          }
        }
        return context;
      });
    }
  }]);
}(Scope);
export {
  ContextMenuPlugin,
  index as Presets
};
/*! Bundled license information:

rete-context-menu-plugin/rete-context-menu-plugin.esm.js:
  (*!
  * rete-context-menu-plugin v2.0.5
  * (c) 2025 Vitaliy Stoliarov
  * Released under the MIT license.
  * *)
*/
//# sourceMappingURL=rete-context-menu-plugin.js.map

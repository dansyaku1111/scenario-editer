/*!
* rete-context-menu-plugin v2.0.5
* (c) 2025 Vitaliy Stoliarov
* Released under the MIT license.
* */
import _typeof from '@babel/runtime/helpers/typeof';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _get from '@babel/runtime/helpers/get';
import _inherits from '@babel/runtime/helpers/inherits';
import { NodeEditor, Scope } from 'rete';
import { BaseAreaPlugin } from 'rete-area-plugin';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function createItem(_ref, key, context) {
  var _ref2 = _slicedToArray(_ref, 2),
    label = _ref2[0],
    factory = _ref2[1];
  var item = {
    label: label,
    key: String(key),
    handler: function handler() {
      /* noop */
    }
  };
  if (typeof factory === 'function') {
    return _objectSpread(_objectSpread({}, item), {}, {
      handler: function handler() {
        return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var node;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return factory();
              case 2:
                node = _context.sent;
                _context.next = 5;
                return context.editor.addNode(node);
              case 5:
                void context.area.translate(node.id, context.area.area.pointer);
              case 6:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }))();
      }
    });
  }
  return _objectSpread(_objectSpread({}, item), {}, {
    handler: function handler() {/* do nothing */},
    subitems: factory.map(function (data, i) {
      return createItem(data, i, context);
    })
  });
}

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
/**
 * Classic context menu preset.
 * Configures nodes/actions items for root and Delete/Clone items for nodes
 * @param nodes List of items
 * @example Presets.classic.setup([
 *  ["Math", [
 *    ["Number", () => new NumberNode()],
 *  ]]
 *])
 */
function setup(nodes) {
  return function (context, plugin) {
    var _context$clone;
    var area = plugin.parentScope(BaseAreaPlugin);
    var editor = area.parentScope(NodeEditor);
    if (context === 'root') {
      return {
        searchBar: true,
        list: nodes.map(function (item, i) {
          return createItem(item, i, {
            editor: editor,
            area: area
          });
        })
      };
    }
    var deleteItem = {
      label: 'Delete',
      key: 'delete',
      handler: function handler() {
        return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var connectionId, nodeId, connections, _iterator, _step, connection;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!('source' in context && 'target' in context)) {
                  _context.next = 6;
                  break;
                }
                // connection
                connectionId = context.id;
                _context.next = 4;
                return editor.removeConnection(connectionId);
              case 4:
                _context.next = 27;
                break;
              case 6:
                // node
                nodeId = context.id;
                connections = editor.getConnections().filter(function (c) {
                  return c.source === nodeId || c.target === nodeId;
                });
                _iterator = _createForOfIteratorHelper(connections);
                _context.prev = 9;
                _iterator.s();
              case 11:
                if ((_step = _iterator.n()).done) {
                  _context.next = 17;
                  break;
                }
                connection = _step.value;
                _context.next = 15;
                return editor.removeConnection(connection.id);
              case 15:
                _context.next = 11;
                break;
              case 17:
                _context.next = 22;
                break;
              case 19:
                _context.prev = 19;
                _context.t0 = _context["catch"](9);
                _iterator.e(_context.t0);
              case 22:
                _context.prev = 22;
                _iterator.f();
                return _context.finish(22);
              case 25:
                _context.next = 27;
                return editor.removeNode(nodeId);
              case 27:
              case "end":
                return _context.stop();
            }
          }, _callee, null, [[9, 19, 22, 25]]);
        }))();
      }
    };
    var clone = (_context$clone = context.clone) === null || _context$clone === void 0 ? void 0 : _context$clone.bind(context);
    var cloneItem = clone && {
      label: 'Clone',
      key: 'clone',
      handler: function handler() {
        return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
          var node;
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                node = clone();
                _context2.next = 3;
                return editor.addNode(node);
              case 3:
                void area.translate(node.id, area.area.pointer);
              case 4:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }))();
      }
    };
    return {
      searchBar: false,
      list: [deleteItem].concat(_toConsumableArray(cloneItem ? [cloneItem] : []))
    };
  };
}

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  setup: setup
});

/**
 * Presets that create items for root and node specific context menu.
 * @module
 */

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  classic: index$1
});

function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, o, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), e, o); return 2 & r && "function" == typeof p ? function (t) { return p.apply(o, t); } : p; }
/**
 * Context menu plugin props
 * @priority 8
 */
/**
 * Signal types produced by ContextMenuPlugin instance
 * @priority 10
 */
/**
 * Plugin for context menu.
 * Responsible for initialing rendering of context menu with predefined items.
 * @priority 9
 * @emits render
 * @emits unmount
 * @listens unmount
 * @listens contextmenu
 * @listens pointerdown
 */
var ContextMenuPlugin = /*#__PURE__*/function (_Scope) {
  /**
   * @param props Properties
   */
  function ContextMenuPlugin(props) {
    var _this;
    _classCallCheck(this, ContextMenuPlugin);
    _this = _callSuper(this, ContextMenuPlugin, ['context-menu']);
    _this.props = props;
    return _this;
  }
  _inherits(ContextMenuPlugin, _Scope);
  return _createClass(ContextMenuPlugin, [{
    key: "setParent",
    value: function setParent(scope) {
      var _this2 = this;
      _superPropGet(ContextMenuPlugin, "setParent", this, 3)([scope]);
      var area = this.parentScope(BaseAreaPlugin);
      var container = area.container;
      if (!container || !(container instanceof HTMLElement)) throw new Error('container expected');
      var element = document.createElement('div');
      element.style.display = 'none';
      element.style.position = 'fixed';

      // eslint-disable-next-line max-statements
      this.addPipe(function (context) {
        var parent = _this2.parentScope();
        if (!context || _typeof(context) !== 'object' || !('type' in context)) return context;
        if (context.type === 'unmount') {
          if (context.data.element === element) {
            element.style.display = 'none';
          }
        } else if (context.type === 'contextmenu') {
          context.data.event.preventDefault();
          context.data.event.stopPropagation();
          var _this2$props$items = _this2.props.items(context.data.context, _this2),
            searchBar = _this2$props$items.searchBar,
            list = _this2$props$items.list;
          container.appendChild(element);
          element.style.left = "".concat(context.data.event.clientX, "px");
          element.style.top = "".concat(context.data.event.clientY, "px");
          element.style.display = '';
          void parent.emit({
            type: 'render',
            data: {
              type: 'contextmenu',
              element: element,
              searchBar: searchBar,
              onHide: function onHide() {
                void parent.emit({
                  type: 'unmount',
                  data: {
                    element: element
                  }
                });
              },
              items: list
            }
          });
        } else if (context.type === 'pointerdown') {
          if (!context.data.event.composedPath().includes(element)) {
            void parent.emit({
              type: 'unmount',
              data: {
                element: element
              }
            });
          }
        }
        return context;
      });
    }
  }]);
}(Scope);

export { ContextMenuPlugin, index as Presets };
//# sourceMappingURL=rete-context-menu-plugin.esm.js.map
